// Mixins for build grid
$grid-columns: 12;
@mixin build-grid($size) {
  @for $i from 1 through $grid-columns {
    @if $size != '' {
      .col-#{$size}-#{$i} {
        width: percentage($i / $grid-columns);
      }
    } @else {
      .col-#{$i} {
        width: percentage($i / $grid-columns);
      }
    }
  }
}
// End mixins for build grid
$grid-gutter: 15px;
$container-width: 100%;
.container {
  width: $container-width;
  margin-right: auto; 
  margin-left: auto;
  padding-left: $grid-gutter;
  padding-right: $grid-gutter;
  &:before,
  &:after {
    box-sizing: border-box;
    content: " ";
    display: table;
  }
}

.row {
  margin-left: -15px;
  margin-right: -15px;
  &:before {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }

}

/* Grid for all screen
 * Ex: col-1, col-2 */
@include build-grid('');

/* Grid for screen min-width: $small
 * Ex: col-small-1, col-small-2 */
@include respond-above(small) {
  @include build-grid(small);
}

/* Grid for screen min-width: $medium
 * Ex: col-medium-1, col-medium-2 */
@include respond-above(medium) {
  @include build-grid(medium);
}

/* Grid for screen min-width: $large
 * Ex: col-large-1, col-large-2 */
@include respond-above(large) {
  @include build-grid(large);
}

/* Grid for screen min-width: $largest
 * Ex: col-largest-1, col-largest-2 */
@include respond-above(largest) {
  @include build-grid(largest);
}

/* Grid for screen min-width: $xs
 * Ex: col-xs-1, col-xs-2 */
@include respond-above(xs) {
  @include build-grid(xs);
}
